// <auto-generated />
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MoviesContext))]
    [Migration("20210515155416_RemovedProductionRelationFromPerson")]
    partial class RemovedProductionRelationFromPerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Domain.Entities.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CaseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Keep Case"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Snapper Case"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Digipack"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Steelbook"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Keep case (slim)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mediabook"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cardboard box set"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Special box set"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CollectionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CollectionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Collection item"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Previosly owned item"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trade item"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wanted item"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.CompanyRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyRoleTypes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Publisher"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Studio"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ConditionClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConditionClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Excellent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fair"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Poor"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bad"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.CoverLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("CoverLanguages");
                });

            modelBuilder.Entity("Domain.Entities.MediaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ConditionClassId")
                        .HasColumnType("integer");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConditionClassId");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("PublicationItemId");

                    b.ToTable("MediaItems");
                });

            modelBuilder.Entity("Domain.Entities.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DVD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blu-ray"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VHS"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4K Ultra HD"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HD DVD"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CD"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Blu-ray 3D"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("GivenName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Entities.PersonRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonRoleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Director"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Writer"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("Domain.Entities.ProductionCompanyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyRoleTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyRoleTypeId");

                    b.HasIndex("ProductionId");

                    b.ToTable("CompanyRoles");
                });

            modelBuilder.Entity("Domain.Entities.ProductionPersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonRoleTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonRoleTypeId");

                    b.HasIndex("ProductionId");

                    b.ToTable("PersonRoles");
                });

            modelBuilder.Entity("Domain.Entities.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Movie"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TV Serie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Document"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Music"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionClassId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<bool>("HasBooklet")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasHologram")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSlipCover")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasTwoSidedCover")
                        .HasColumnType("boolean");

                    b.Property<string>("IdInImportOrigin")
                        .HasColumnType("text");

                    b.Property<int>("ImportOriginId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalTitle")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("ConditionClassId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Domain.Entities.PublicationCompanyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyRoleTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyRoleTypeId");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationCompanyRole");
                });

            modelBuilder.Entity("Domain.Entities.PublicationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationItems");
                });

            modelBuilder.Entity("Domain.Entities.SpokenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<int>("PublicationItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicationItemId");

                    b.ToTable("SpokenLanguages");
                });

            modelBuilder.Entity("Domain.Entities.SubtitleLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<int>("PublicationItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicationItemId");

                    b.ToTable("SubtitleLanguages");
                });

            modelBuilder.Entity("Domain.Entities.CoverLanguage", b =>
                {
                    b.HasOne("Domain.Entities.Publication", "Publication")
                        .WithMany("CoverLanguages")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Domain.Entities.MediaItem", b =>
                {
                    b.HasOne("Domain.Entities.ConditionClass", "ConditionClass")
                        .WithMany()
                        .HasForeignKey("ConditionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PublicationItem", "PublicationItem")
                        .WithMany("MediaItems")
                        .HasForeignKey("PublicationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditionClass");

                    b.Navigation("MediaType");

                    b.Navigation("PublicationItem");
                });

            modelBuilder.Entity("Domain.Entities.Production", b =>
                {
                    b.HasOne("Domain.Entities.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionType");
                });

            modelBuilder.Entity("Domain.Entities.ProductionCompanyRole", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CompanyRoleType", "Role")
                        .WithMany()
                        .HasForeignKey("CompanyRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Production", "Production")
                        .WithMany("ProductionCompanyRoles")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Production");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.ProductionPersonRole", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PersonRoleType", "PersonRoleType")
                        .WithMany()
                        .HasForeignKey("PersonRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Production", "Production")
                        .WithMany("PersonRoles")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PersonRoleType");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("Domain.Entities.Publication", b =>
                {
                    b.HasOne("Domain.Entities.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ConditionClass", "ConditionClass")
                        .WithMany()
                        .HasForeignKey("ConditionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("ConditionClass");
                });

            modelBuilder.Entity("Domain.Entities.PublicationCompanyRole", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CompanyRoleType", "Role")
                        .WithMany()
                        .HasForeignKey("CompanyRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Publication", "Publication")
                        .WithMany("PublicationCompanyRoles")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Publication");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.PublicationItem", b =>
                {
                    b.HasOne("Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Publication", "Publication")
                        .WithMany("PublicationItems")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Domain.Entities.SpokenLanguage", b =>
                {
                    b.HasOne("Domain.Entities.PublicationItem", "PublicationItem")
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("PublicationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicationItem");
                });

            modelBuilder.Entity("Domain.Entities.SubtitleLanguage", b =>
                {
                    b.HasOne("Domain.Entities.PublicationItem", "PublicationItem")
                        .WithMany("SubtitleLanguages")
                        .HasForeignKey("PublicationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicationItem");
                });

            modelBuilder.Entity("Domain.Entities.Production", b =>
                {
                    b.Navigation("PersonRoles");

                    b.Navigation("ProductionCompanyRoles");
                });

            modelBuilder.Entity("Domain.Entities.Publication", b =>
                {
                    b.Navigation("CoverLanguages");

                    b.Navigation("PublicationCompanyRoles");

                    b.Navigation("PublicationItems");
                });

            modelBuilder.Entity("Domain.Entities.PublicationItem", b =>
                {
                    b.Navigation("MediaItems");

                    b.Navigation("SpokenLanguages");

                    b.Navigation("SubtitleLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
